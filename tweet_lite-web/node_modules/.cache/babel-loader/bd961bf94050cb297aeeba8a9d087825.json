{"ast":null,"code":"function getCookie(name) {\n  var cookieValue = null;\n\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nfunction lookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest();\n  const url = `http://localhost:8000/api${endpoint}`;\n  xhr.responseType = \"json\";\n  xhr.open(method, url);\n  const csrftoken = getCookie(\"csrftoken\");\n  /* xhr.setRequestHeader(\"Content-Type\", \"application/json\"); */\n\n  /* if (csrftoken) {\r\n  \txhr.setRequestHeader(\"x-CSRFTOKEN\", csrftoken);\r\n  \txhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\r\n  \txhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n  } */\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({\n      message: \"the request was an error\"\n    }, 400);\n  };\n\n  xhr.send(jsonData);\n}\n\nexport function createTweet(newTweet, callback) {\n  lookup(\"POST\", \"/tweets/create/\", callback, {\n    content: newTweet\n  });\n}\nexport function loadTweets(callback) {\n  lookup(\"GET\", \"/tweets/\", callback);\n}","map":{"version":3,"sources":["F:/Study/010 Programming learning/@React Js/TweetLite/tweet_lite-web/src/lookup/components.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","csrftoken","onload","response","status","onerror","e","console","log","message","send","createTweet","newTweet","content","loadTweets"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACxB,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC9C,QAAIC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACxC,UAAIH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAb,CADwC,CAExC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAAyCP,IAAI,GAAG,GAApD,EAAyD;AACxDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACA;AACD;AACD;;AACD,SAAON,WAAP;AACA;;AAED,SAASU,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;AACjD,MAAIC,QAAJ;;AACA,MAAID,IAAJ,EAAU;AACTC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACA;;AAED,QAAMI,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,QAAMC,GAAG,GAAI,4BAA2BR,QAAS,EAAjD;AAEAM,EAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AACAH,EAAAA,GAAG,CAACI,IAAJ,CAASX,MAAT,EAAiBS,GAAjB;AACA,QAAMG,SAAS,GAAGzB,SAAS,CAAC,WAAD,CAA3B;AACA;;AAEA;AACD;AACA;AACA;AACA;;AAECoB,EAAAA,GAAG,CAACM,MAAJ,GAAa,YAAY;AACxBX,IAAAA,QAAQ,CAACK,GAAG,CAACO,QAAL,EAAeP,GAAG,CAACQ,MAAnB,CAAR;AACA,GAFD;;AAGAR,EAAAA,GAAG,CAACS,OAAJ,GAAc,UAAUC,CAAV,EAAa;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAf,IAAAA,QAAQ,CAAC;AAAEkB,MAAAA,OAAO,EAAE;AAAX,KAAD,EAA0C,GAA1C,CAAR;AACA,GAHD;;AAIAb,EAAAA,GAAG,CAACc,IAAJ,CAASjB,QAAT;AACA;;AAED,OAAO,SAASkB,WAAT,CAAqBC,QAArB,EAA+BrB,QAA/B,EAAyC;AAC/CH,EAAAA,MAAM,CAAC,MAAD,EAAS,iBAAT,EAA4BG,QAA5B,EAAsC;AAAEsB,IAAAA,OAAO,EAAED;AAAX,GAAtC,CAAN;AACA;AAED,OAAO,SAASE,UAAT,CAAoBvB,QAApB,EAA8B;AACpCH,EAAAA,MAAM,CAAC,KAAD,EAAQ,UAAR,EAAoBG,QAApB,CAAN;AACA","sourcesContent":["function getCookie(name) {\r\n\tvar cookieValue = null;\r\n\tif (document.cookie && document.cookie !== \"\") {\r\n\t\tvar cookies = document.cookie.split(\";\");\r\n\t\tfor (var i = 0; i < cookies.length; i++) {\r\n\t\t\tvar cookie = cookies[i].trim();\r\n\t\t\t// Does this cookie string begin with the name we want?\r\n\t\t\tif (cookie.substring(0, name.length + 1) === name + \"=\") {\r\n\t\t\t\tcookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn cookieValue;\r\n}\r\n\r\nfunction lookup(method, endpoint, callback, data) {\r\n\tlet jsonData;\r\n\tif (data) {\r\n\t\tjsonData = JSON.stringify(data);\r\n\t}\r\n\r\n\tconst xhr = new XMLHttpRequest();\r\n\tconst url = `http://localhost:8000/api${endpoint}`;\r\n\r\n\txhr.responseType = \"json\";\r\n\txhr.open(method, url);\r\n\tconst csrftoken = getCookie(\"csrftoken\");\r\n\t/* xhr.setRequestHeader(\"Content-Type\", \"application/json\"); */\r\n\r\n\t/* if (csrftoken) {\r\n\t\txhr.setRequestHeader(\"x-CSRFTOKEN\", csrftoken);\r\n\t\txhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\r\n\t\txhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n\t} */\r\n\r\n\txhr.onload = function () {\r\n\t\tcallback(xhr.response, xhr.status);\r\n\t};\r\n\txhr.onerror = function (e) {\r\n\t\tconsole.log(e);\r\n\t\tcallback({ message: \"the request was an error\" }, 400);\r\n\t};\r\n\txhr.send(jsonData);\r\n}\r\n\r\nexport function createTweet(newTweet, callback) {\r\n\tlookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet });\r\n}\r\n\r\nexport function loadTweets(callback) {\r\n\tlookup(\"GET\", \"/tweets/\", callback);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}